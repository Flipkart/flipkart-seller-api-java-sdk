
/*
 * listings-flipkart-v3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.flipkart.api.seller.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.flipkart.api.seller.client.JSON;


/**
 * Fulfillment
 */
@JsonPropertyOrder({
    Fulfillment.JSON_PROPERTY_DISPATCH_SLA,
    Fulfillment.JSON_PROPERTY_SHIPPING_PROVIDER,
    Fulfillment.JSON_PROPERTY_PROCUREMENT_TYPE,
    Fulfillment.JSON_PROPERTY_REGION_RESTRICTION
})

public class Fulfillment {
  public static final String JSON_PROPERTY_DISPATCH_SLA = "dispatch_sla";
  private Integer dispatchSla;

  /**
   * Gets or Sets shippingProvider
   */
  public enum ShippingProviderEnum {
    FLIPKART("FLIPKART"),

    SELLER("SELLER"),

    FLIPKART_SELLER("FLIPKART_SELLER"),

    SELLER_FLIPKART("SELLER_FLIPKART");

    private String value;

    ShippingProviderEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ShippingProviderEnum fromValue(String value) {
      for (ShippingProviderEnum b : ShippingProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SHIPPING_PROVIDER = "shipping_provider";
  private ShippingProviderEnum shippingProvider;

  /**
   * Gets or Sets procurementType
   */
  public enum ProcurementTypeEnum {
    EXPRESS("EXPRESS"),

    REGULAR("REGULAR"),

    INTERNATIONAL("INTERNATIONAL"),

    MADE_TO_ORDER("MADE_TO_ORDER"),

    DOMESTIC("DOMESTIC");

    private String value;

    ProcurementTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProcurementTypeEnum fromValue(String value) {
      for (ProcurementTypeEnum b : ProcurementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROCUREMENT_TYPE = "procurement_type";
  private ProcurementTypeEnum procurementType;

  /**
   * Gets or Sets regionRestriction
   */
  public enum RegionRestrictionEnum {
    ZONAL("zonal"),

    NATIONAL("national"),

    NONE("none");

    private String value;

    RegionRestrictionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RegionRestrictionEnum fromValue(String value) {
      for (RegionRestrictionEnum b : RegionRestrictionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REGION_RESTRICTION = "region_restriction";
  private RegionRestrictionEnum regionRestriction;

  public Fulfillment() {
  }

  public Fulfillment dispatchSla(Integer dispatchSla) {
    this.dispatchSla = dispatchSla;
    return this;
  }

  /**
   * Get dispatchSla
   * minimum: 1
   * @return dispatchSla
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DISPATCH_SLA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDispatchSla() {
    return dispatchSla;
  }


  @JsonProperty(JSON_PROPERTY_DISPATCH_SLA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDispatchSla(Integer dispatchSla) {
    this.dispatchSla = dispatchSla;
  }


  public Fulfillment shippingProvider(ShippingProviderEnum shippingProvider) {
    this.shippingProvider = shippingProvider;
    return this;
  }

  /**
   * Get shippingProvider
   * @return shippingProvider
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SHIPPING_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ShippingProviderEnum getShippingProvider() {
    return shippingProvider;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShippingProvider(ShippingProviderEnum shippingProvider) {
    this.shippingProvider = shippingProvider;
  }


  public Fulfillment procurementType(ProcurementTypeEnum procurementType) {
    this.procurementType = procurementType;
    return this;
  }

  /**
   * Get procurementType
   * @return procurementType
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PROCUREMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProcurementTypeEnum getProcurementType() {
    return procurementType;
  }


  @JsonProperty(JSON_PROPERTY_PROCUREMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProcurementType(ProcurementTypeEnum procurementType) {
    this.procurementType = procurementType;
  }


  public Fulfillment regionRestriction(RegionRestrictionEnum regionRestriction) {
    this.regionRestriction = regionRestriction;
    return this;
  }

  /**
   * Get regionRestriction
   * @return regionRestriction
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REGION_RESTRICTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RegionRestrictionEnum getRegionRestriction() {
    return regionRestriction;
  }


  @JsonProperty(JSON_PROPERTY_REGION_RESTRICTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegionRestriction(RegionRestrictionEnum regionRestriction) {
    this.regionRestriction = regionRestriction;
  }


  /**
   * Return true if this Fulfillment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fulfillment fulfillment = (Fulfillment) o;
    return Objects.equals(this.dispatchSla, fulfillment.dispatchSla) &&
        Objects.equals(this.shippingProvider, fulfillment.shippingProvider) &&
        Objects.equals(this.procurementType, fulfillment.procurementType) &&
        Objects.equals(this.regionRestriction, fulfillment.regionRestriction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dispatchSla, shippingProvider, procurementType, regionRestriction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fulfillment {\n");
    sb.append("    dispatchSla: ").append(toIndentedString(dispatchSla)).append("\n");
    sb.append("    shippingProvider: ").append(toIndentedString(shippingProvider)).append("\n");
    sb.append("    procurementType: ").append(toIndentedString(procurementType)).append("\n");
    sb.append("    regionRestriction: ").append(toIndentedString(regionRestriction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


