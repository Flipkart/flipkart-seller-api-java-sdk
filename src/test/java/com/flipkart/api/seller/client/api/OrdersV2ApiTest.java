/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipkart.api.seller.client.api;

import com.flipkart.api.seller.client.model.BulkActionProgressResponse;
import com.flipkart.api.seller.client.model.BulkConfirmResponseV2;
import com.flipkart.api.seller.client.model.BulkRtdActionRequest;
import com.flipkart.api.seller.client.model.BulkRtdResponse;
import com.flipkart.api.seller.client.model.CancelRequestV2;
import com.flipkart.api.seller.client.model.FetchOrderItemsResponse;
import com.flipkart.api.seller.client.model.GenerateLabelRequestV2;
import com.flipkart.api.seller.client.model.InvoicesSearchResponseV2;
import com.flipkart.api.seller.client.model.OrderItem;
import com.flipkart.api.seller.client.model.OrderItemCancelResponse;
import com.flipkart.api.seller.client.model.SearchOrderItemRequest;
import com.flipkart.api.seller.client.model.SearchOrderItemResponseV2;
import com.flipkart.api.seller.client.model.ServiceAttemptRequest;
import com.flipkart.api.seller.client.model.ServiceCompleteRequest;
import com.flipkart.api.seller.client.model.ServiceResponseStatusV2;
import com.flipkart.api.seller.client.model.ShipmentSearchResponse;
import com.flipkart.api.seller.client.model.ShipmentsDeliverAttemptRequestV2;
import com.flipkart.api.seller.client.model.ShipmentsDeliverRequestV2;
import com.flipkart.api.seller.client.model.ShipmentsDeliverResponseV2;
import com.flipkart.api.seller.client.model.ShipmentsDispatchRequestV2;
import com.flipkart.api.seller.client.model.ShipmentsDispatchResponseV2;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersV2Api
 */
@Ignore
public class OrdersV2ApiTest {

    private final OrdersV2Api api = new OrdersV2Api();

    
    /**
     * Cancel order items
     *
     * This operation allows client to cancel order items before marking them &#x60;PACKED&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelOrdersTest() throws Exception {
        CancelRequestV2 body = null;
        OrderItemCancelResponse response = api.cancelOrders(body);

        // TODO: test validations
    }
    
    /**
     * Check label generation status
     *
     * This operation returns the status of the label generation process which was triggered using &#x60;POST /v2/orders/labels&#x60; API. Query param &#x60;requestId&#x60; is the same value which is returned in the response of &#x60;POST /v2/orders/labels&#x60; API
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBulkActionProgressByRequestIdTest() throws Exception {
        String requestId = null;
        BulkActionProgressResponse response = api.getBulkActionProgressByRequestId(requestId);

        // TODO: test validations
    }
    
    /**
     * Get invoice details for order items
     *
     * This operation returns the GST tax details, invoice number and date for the order items
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getInvoicesInfoTest() throws Exception {
        String orderItemIds = null;
        InvoicesSearchResponseV2 response = api.getInvoicesInfo(orderItemIds);

        // TODO: test validations
    }
    
    /**
     * Download labels and invoices in PDF format for order items
     *
     * This operation returns the labels and invoices for the order items in PDF format. Label and invoice must have been generated before invoking this method.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLabelsTest() throws Exception {
        String orderItemIds = null;
        api.getLabels(orderItemIds);

        // TODO: test validations
    }
    
    /**
     * Download manifest PDF
     *
     * This operation returns the manifest file in PDF format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getManifestPdfForRequestTest() throws Exception {
        api.getManifestPdfForRequest();

        // TODO: test validations
    }
    
    /**
     * Get details of order item
     *
     * This operation returns details for the order item id
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrderItemByIdTest() throws Exception {
        String orderItemId = null;
        OrderItem response = api.getOrderItemById(orderItemId);

        // TODO: test validations
    }
    
    /**
     * Get details of order items
     *
     * This operation returns details for the order item ids passed in the query param. This is a bulk version of &#x60;GET /v2/orders/{order_item_id}&#x60; API
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrderItemsByIdsTest() throws Exception {
        String orderItemIds = null;
        FetchOrderItemsResponse response = api.getOrderItemsByIds(orderItemIds);

        // TODO: test validations
    }
    
    /**
     * Get shipping related details of order items
     *
     * This operation returns shipping and tracking related details of the order items e.g delivery / billing address, tracking id, buyer address, etc. Buyer contact number and email address would be provided only for self-ship orders.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getShipmentsTest() throws Exception {
        String orderItemIds = null;
        ShipmentSearchResponse response = api.getShipments(orderItemIds);

        // TODO: test validations
    }
    
    /**
     * Search order items using filters
     *
     * This operation returns order items based on applied filters
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchOrderItemRequestTest() throws Exception {
        SearchOrderItemRequest body = null;
        SearchOrderItemResponseV2 response = api.searchOrderItemRequest(body);

        // TODO: test validations
    }
    
    /**
     * Trigger label generation for order items
     *
     * This operation triggers the generation of invoice and shipping labels for the order items and marks them as &#x60;PACKED&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitBulkConfirmRequestTest() throws Exception {
        GenerateLabelRequestV2 body = null;
        BulkConfirmResponseV2 response = api.submitBulkConfirmRequest(body);

        // TODO: test validations
    }
    
    /**
     * Mark order items ready for dispatch
     *
     * This operation is used to mark the order items as &#x60;READY_TO_DISPATCH&#x60;. It must be invoked after downloading the invoice and label.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitBulkRtdRequestTest() throws Exception {
        BulkRtdActionRequest body = null;
        BulkRtdResponse response = api.submitBulkRtdRequest(body);

        // TODO: test validations
    }
    
    /**
     * Update delivery attempt for self-ship order items
     *
     * This operation is used to update the delivery attempt with failure reason and new delivery date for the self-ship order items.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitSelfShipDeliverAttemptRequestTest() throws Exception {
        ShipmentsDeliverAttemptRequestV2 body = null;
        ShipmentsDeliverResponseV2 response = api.submitSelfShipDeliverAttemptRequest(body);

        // TODO: test validations
    }
    
    /**
     * Update delivery date for self-ship order items
     *
     * This operation is used to update the delivery date for self-ship order items.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitSelfShipDeliverRequestTest() throws Exception {
        ShipmentsDeliverRequestV2 body = null;
        ShipmentsDeliverResponseV2 response = api.submitSelfShipDeliverRequest(body);

        // TODO: test validations
    }
    
    /**
     * Mark self-ship order items ready for dispatch
     *
     * This operation is used to mark self-ship order items as &#x60;READY_TO_DISPATCH&#x60; from the seller warehouse.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitSelfShipmentDispatchRequestTest() throws Exception {
        ShipmentsDispatchRequestV2 body = null;
        ShipmentsDispatchResponseV2 response = api.submitSelfShipmentDispatchRequest(body);

        // TODO: test validations
    }
    
    /**
     * Update service attempts
     *
     * This operation is used to update the service attempt with failure reason and new delivery date.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitServiceAttemptRequestTest() throws Exception {
        ServiceAttemptRequest body = null;
        ServiceResponseStatusV2 response = api.submitServiceAttemptRequest(body);

        // TODO: test validations
    }
    
    /**
     * Update services as complete
     *
     * This operation is used to mark the services as complete.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitServiceCompleteRequestTest() throws Exception {
        ServiceCompleteRequest body = null;
        ServiceResponseStatusV2 response = api.submitServiceCompleteRequest(body);

        // TODO: test validations
    }
    
}
