/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipkart.api.seller.client.api;

import com.flipkart.api.seller.client.model.CancelShipmentRequest;
import com.flipkart.api.seller.client.model.DispatchShipmentRequest;
import com.flipkart.api.seller.client.model.GetManifestRequest;
import com.flipkart.api.seller.client.model.InputStream;
import com.flipkart.api.seller.client.model.SearchShipmentRequest;
import com.flipkart.api.seller.client.model.SearchShipmentResponse;
import com.flipkart.api.seller.client.model.SelfshipDispatchRequestV3;
import com.flipkart.api.seller.client.model.ShipmentDetailsResponseV3;
import com.flipkart.api.seller.client.model.ShipmentPackRequest;
import com.flipkart.api.seller.client.model.ShipmentResponse;
import com.flipkart.api.seller.client.model.ShipmentStatusResponse;
import com.flipkart.api.seller.client.model.ShipmentsDeliverAttemptRequestV2;
import com.flipkart.api.seller.client.model.ShipmentsDeliverRequestV2;
import com.flipkart.api.seller.client.model.ShipmentsDeliverResponseV2;
import com.flipkart.api.seller.client.model.ShipmentsDispatchResponseV2;
import com.flipkart.api.seller.client.model.UpdateShipmentRequest;
import com.flipkart.api.seller.client.model.VendorGroupCodeDetailsResponseV3;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShipmentV3Api
 */
@Ignore
public class ShipmentV3ApiTest {

    private final ShipmentV3Api api = new ShipmentV3Api();

    
    /**
     * Cancel order items in a shipment
     *
     * This operation allows client to cancel order items inside shipment before marking them &#x60;PACKED&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelByEnforcedGroupIdsTest() throws Exception {
        CancelShipmentRequest body = null;
        ShipmentStatusResponse response = api.cancelByEnforcedGroupIds(body);

        // TODO: test validations
    }
    
    /**
     * Download invoice PDF
     *
     * This operation provides invoices for shipments in the PDF format. Label and invoice must have been generated before invoking this method.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getInvoicesPdfFromEsiTest() throws Exception {
        String shipmentIds = null;
        api.getInvoicesPdfFromEsi(shipmentIds);

        // TODO: test validations
    }
    
    /**
     * Download labels and invoices in PDF format for shipments
     *
     * This operation returns the labels and invoices for the shipments in PDF format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLabelsTest() throws Exception {
        String shipmentIds = null;
        api.getLabels(shipmentIds);

        // TODO: test validations
    }
    
    /**
     * Download labels Byte-Stream for shipments
     *
     * This operation returns the labels for the shipments in Byte-Stream format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLabelsOnlyTest() throws Exception {
        String shipmentIds = null;
        Boolean reprint = null;
        InputStream response = api.getLabelsOnly(shipmentIds, reprint);

        // TODO: test validations
    }
    
    /**
     * Download labels in PDF format for shipments
     *
     * This operation returns the labels for the shipments in PDF format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLabelsOnlyPDFTest() throws Exception {
        String shipmentIds = null;
        Boolean reprint = null;
        api.getLabelsOnlyPDF(shipmentIds, reprint);

        // TODO: test validations
    }
    
    /**
     * Download manifest PDF
     *
     * This operation returns the manifest file in PDF format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getManifestTest() throws Exception {
        GetManifestRequest body = null;
        api.getManifest(body);

        // TODO: test validations
    }
    
    /**
     * Get shipping related details for shipments
     *
     * This operation returns shipping and tracking related details of the shipments e.g delivery / billing address, tracking id, buyer address, etc. Buyer contact number and email address would be provided only for self-ship shipments.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getShipmentDetailsTest() throws Exception {
        String shipmentIds = null;
        ShipmentDetailsResponseV3 response = api.getShipmentDetails(shipmentIds);

        // TODO: test validations
    }
    
    /**
     * Get order details for given shipment or order ids
     *
     * This operation returns the order related details for the shipments. This operation can accept either shipmentIds, orderIds or orderItemIds, but only one type of query param is accepted per invocation.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getShipmentDetailsByInternalIdTest() throws Exception {
        String shipmentIds = null;
        String orderItemIds = null;
        String orderIds = null;
        ShipmentResponse response = api.getShipmentDetailsByInternalId(shipmentIds, orderItemIds, orderIds);

        // TODO: test validations
    }
    
    /**
     * Get shipment handover counts per vendor
     *
     * This operation returns the count of shipments to be handed over to the logistics partner (E-Kart or 3rd party vendors)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVendorGroupDetailsTest() throws Exception {
        String locationId = null;
        List<VendorGroupCodeDetailsResponseV3> response = api.getVendorGroupDetails(locationId);

        // TODO: test validations
    }
    
    /**
     * Mark shipments ready for dispatch
     *
     * This operation is used to mark the shipments as &#x60;READY_TO_DISPATCH&#x60; after the labels and invoices are generated and downloaded.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void markRTDTest() throws Exception {
        DispatchShipmentRequest body = null;
        ShipmentStatusResponse response = api.markRTD(body);

        // TODO: test validations
    }
    
    /**
     * Trigger label generation for shipments
     *
     * This operation triggers the generation of invoice and shipping labels for the shipment ids and marks shipments as &#x60;PACKED&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packTest() throws Exception {
        ShipmentPackRequest body = null;
        ShipmentStatusResponse response = api.pack(body);

        // TODO: test validations
    }
    
    /**
     * Search shipments using filters
     *
     * This operation should be used if &#x60;hasMore&#x60; is true in the response of &#x60;POST /v3/shipments/filter&#x60; API, so that the client can fetch the next set of shipment which qualify the earlier defined filter criteria. User need not build this URL by themselves, just use the URL returned as &#x60;nextPageUrl&#x60; in the response of &#x60;POST /v3/shipments/filter&#x60; or &#x60;GET /v3/shipments/filter&#x60;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchPreDispatchShipmentGetTest() throws Exception {
        String nextToken = null;
        SearchShipmentResponse response = api.searchPreDispatchShipmentGet(nextToken);

        // TODO: test validations
    }
    
    /**
     * Search shipments using filters
     *
     * This operation returns shipments based on applied filters
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchPreDispatchShipmentPostTest() throws Exception {
        SearchShipmentRequest body = null;
        SearchShipmentResponse response = api.searchPreDispatchShipmentPost(body);

        // TODO: test validations
    }
    
    /**
     * Update delivery attempt for self-ship shipments
     *
     * This operation is used to update the delivery attempt with failure reason and new delivery date for the self-ship shipments.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitSelfShipDeliverAttemptRequestTest() throws Exception {
        ShipmentsDeliverAttemptRequestV2 body = null;
        ShipmentsDeliverResponseV2 response = api.submitSelfShipDeliverAttemptRequest(body);

        // TODO: test validations
    }
    
    /**
     * Update delivery date for self-ship shipments
     *
     * This operation is used to update the delivery date for self-ship shipments.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitSelfShipDeliveryRequestTest() throws Exception {
        ShipmentsDeliverRequestV2 body = null;
        ShipmentsDeliverResponseV2 response = api.submitSelfShipDeliveryRequest(body);

        // TODO: test validations
    }
    
    /**
     * Mark self-ship shipments dispatched
     *
     * This operation is used to mark self-ship order items as &#x60;SHIPPED&#x60; from the seller warehouse.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitSelfShiptDispatchRequestTest() throws Exception {
        SelfshipDispatchRequestV3 body = null;
        ShipmentsDispatchResponseV2 response = api.submitSelfShiptDispatchRequest(body);

        // TODO: test validations
    }
    
    /**
     * Update Tracking Id of the Shipment
     *
     * This operation is used to update the Tracking Id for self-ship shipments.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTrackingInfoTest() throws Exception {
        String shipmentId = null;
        UpdateShipmentRequest body = null;
        api.updateTrackingInfo(shipmentId, body);

        // TODO: test validations
    }
    
}
